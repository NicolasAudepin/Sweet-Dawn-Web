{"version":3,"sources":["utilities.js","Coco.jsx","DataVis.jsx","MidiOut.jsx","App.js","index.js"],"names":["drawRect","detections","ctx","forEach","prediction","x","y","width","height","text","strokeStyle","font","lineWidth","beginPath","fillStyle","fillText","rect","stroke","Coco","props","webcamRef","useRef","canvasRef","runCoco","a","cocossd","net","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","obj","getContext","data","parentCallback","useEffect","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","DataVis","Component","this","counts","map","dataItem","class","filter","name","index","array","indexOf","classname","count","item","length","tv","laptop","phone","person","Math","max","App","state","callbackSetDetections","childData","setState","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c883d5b1.chunk.js","sourcesContent":["export const drawRect = (detections, ctx) =>{\n  // Loop through each prediction\n  detections.forEach(prediction => {\n\n    // Extract boxes and classes\n    const [x, y, width, height] = prediction['bbox']; \n    const text = prediction['class']; \n\n    // Set styling\n    const color = \"4411FF\";\n    ctx.strokeStyle = '#' + color\n    ctx.font = '18px Arial';\n    ctx.lineWidth = \"4\"\n\n    // Draw rectangles and text\n    ctx.beginPath();   \n    ctx.fillStyle = '#' + color\n    ctx.fillText(text, x, y);\n    ctx.rect(x, y, width, height); \n    ctx.stroke();\n  });\n}\n","// Import dependencies\r\nimport React, { useRef, useState, useEffect, Component } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { drawRect } from \"./utilities\";\r\n    \r\nfunction Coco (props) {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  let options = [];\r\n  // Main function\r\n  function sendData(data) {\r\n    props.parentCallback(data);\r\n}\r\n\r\n  const runCoco = async () => {\r\n    \r\n    \r\n\r\n    const net = await cocossd.load();\r\n    console.log(\"coco model loaded.\");\r\n    //  Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n\r\n\r\n\r\n  const detect = async (net) => {\r\n    \r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      //console.log(webcamRef)\r\n\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // Make Detections\r\n      const obj = await net.detect(video);\r\n      //console.log(obj)\r\n      // Draw mesh\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      drawRect(obj, ctx); \r\n      //console.log(obj)\r\n      sendData(obj);\r\n\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{runCoco()},[]);\r\n\r\n  return (\r\n    <div >\r\n      <h2>\r\n          WEBCAM\r\n\r\n      </h2>\r\n      <div>\r\n        <Webcam\r\n          ref={webcamRef}\r\n          muted={true} \r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 8,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n      </div>\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Coco;\r\n","import React, { Component } from \"react\";\r\nimport  {CLASSES} from './CocoClasses.ts';\r\nclass DataVis extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n    };  \r\n    \r\n    render() {\r\n        //const {values, names}= this.state; \r\n        const detections = this.props.detections ; \r\n\r\n        const detectionTypes = detections\r\n            .map(dataItem => dataItem.class) // get all media types\r\n            .filter((name, index, array) => array.indexOf(name) === index); // filter out duplicates\r\n        \r\n        const counts = detectionTypes\r\n        .map(classname => ({\r\n            name: classname,\r\n            count: detections.filter(item => item.class === classname).length\r\n        }));\r\n\r\n        const tv = detections.filter(item => item.class === \"tv\").length\r\n        const laptop = detections.filter(item => item.class === \"laptop\").length\r\n        const phone = detections.filter(item => item.class === \"cell phone\").length\r\n        const person = detections.filter(item => item.class === \"person\").length\r\n\r\n        \r\n        \r\n        return (\r\n            <div>\r\n                <h2>DATAVIS</h2>\r\n\r\n                <div>\r\n                    <h3>Detected Stuff</h3>\r\n                    {counts.map((detections,index) => <p>{detections.name} : {detections.count}</p>)}\r\n                </div>\r\n                <div>\r\n                    <h3>Cool Values</h3>\r\n                    Screen Per Personne :{(tv + laptop + phone)/ (Math.max(person,1) )}\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataVis;","\r\nimport React,{ Component } from \"react\";\r\nimport * as WebMidi from \"webmidi\";\r\n\r\n//https://github.com/djipco/webmidi\r\n\r\n\r\n\r\n\r\nclass MidiOut extends Component {\r\n    \r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        console.log(\"misi out constructor\");\r\n        this.state = {\r\n            inputs : [],\r\n            outputs: [],\r\n            currentOutput : null,\r\n            \r\n        }\r\n     \r\n        this.SetupMidi = this.SetupMidi.bind(this);   \r\n        this.HandleInChange=this.HandleInChange.bind(this);\r\n        this.HandleOutChange =  this.HandleOutChange.bind(this);\r\n        this.Sendnotes =  this.Sendnotes.bind(this)\r\n        this.SetupMidi()\r\n    };\r\n\r\n\r\n    \r\n\r\n    Sendnotes = async (output) => {\r\n\r\n        const Note  = (output) =>{\r\n            console.log(\"NOTE\")\r\n            output.playNote(\"G4\",\"all\", {velocity: 1})\r\n            .stopNote(\"G4\", \"all\", {time: 400});    // After 1.2 s.\r\n        }\r\n        console.log(\"seeend noootes\");\r\n        //  Loop and detect hands\r\n        setInterval(() => {\r\n            if(output === null){\r\n                console.log(\"outnuuuulll\")\r\n            }\r\n            else{\r\n                Note(output);\r\n            }\r\n              \r\n\r\n        }, 500);\r\n      };\r\n\r\n    SetupMidi() {\r\n        let optionsOut = [];\r\n        let optionsIn = [];\r\n        WebMidi.enable(function (err) {\r\n            if (err) {\r\n                console.log(\"WebMidi could not be enabled.\", err);\r\n            } else {\r\n                console.log(\"WebMidi enabled!\");\r\n                console.log(WebMidi.inputs);\r\n                console.log(WebMidi.outputs);\r\n                console.log(WebMidi.outputs.length);\r\n                WebMidi.inputs.map((out,index) =>  optionsIn.push(<option value = {WebMidi.inputs[index].name} >{WebMidi.inputs[index].name}</option>));\r\n                WebMidi.outputs.map((out,index) =>  optionsOut.push(<option value = {WebMidi.outputs[index].name}>{WebMidi.outputs[index].name}</option>));\r\n                WebMidi.outputs.map((out,index) => console.log(WebMidi.outputs[index]));\r\n                WebMidi.outputs.map((out,index) => console.log(WebMidi.outputs[index].name));\r\n   \r\n    \r\n            }\r\n        });\r\n        setTimeout(() => {this.setState({ outputs: optionsOut , inputs: optionsIn});}, 3000);\r\n        \r\n    } \r\n\r\n    HandleInChange(e) {\r\n        let x = e.target.value;\r\n        document.getElementById(\"demo\").innerHTML = \"You selected: \" + x;\r\n    }    \r\n    HandleOutChange(e) {\r\n        let x = e.target.value;\r\n        document.getElementById(\"demo\").innerHTML = \"You selected: \" + x;\r\n        var midiOutput = WebMidi.getOutputByName(x);\r\n        console.log(\"new midi out\")\r\n        console.log(midiOutput)\r\n        setTimeout(() => {this.setState({ currentOutput : midiOutput});}, 3000);\r\n        this.Sendnotes(midiOutput);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n    render() {\r\n        const {inputs, outputs}= this.state;   \r\n        return (\r\n          <div>\r\n                <p>MIDI</p>\r\n                <div>\r\n                    <div>\r\n                        Input\r\n                        <select id = \"selectInput\" onChange={this.HandleInChange}>                 \r\n                            {inputs}\r\n                        </select>                   \r\n                    </div>\r\n                    <div>\r\n                        Output\r\n                        <select id = \"selectOutput\" onChange={this.HandleOutChange}>                 \r\n                            {outputs}\r\n                        </select>\r\n                        \r\n                    </div>\r\n                    <p id=\"demo\"></p>\r\n\r\n                </div>\r\n                <div>\r\n                    <p> There Are Things on screen</p>\r\n                </div>\r\n\r\n\r\n          </div>\r\n \r\n           )\r\n        }\r\n\r\n}\r\n\r\nexport default MidiOut;\r\n","// Import dependencies\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\n//https://github.com/djipco/webmidi\r\n  \r\nimport Coco from \"./Coco\";\r\nimport MidiOut from \"./MidiOut\";\r\nimport DataVis from \"./DataVis\";\r\n\r\nclass App extends Component {\r\n\r\n  state = {detections:[]}\r\n\r\n  callbackSetDetections = (childData) => {\r\n    this.setState({detections: childData});\r\n  }\r\n\r\n  render(){\r\n    const {detections} = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <h1>SWEET DAWN</h1>\r\n        \r\n        \r\n        <DataVis detections = {detections}/>\r\n        <Coco parentCallback = {this.callbackSetDetections}/>\r\n  \r\n        </header>\r\n      </div>\r\n    );\r\n  \r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}